const db = require("../../utils/db")
const registration = require('../registration.js')

const startBasic = async (bot) => {
    try {
        await bot.start(async (ctx, next) => {
            await registration(ctx, next)
        })
    } catch (err) {
        console.error(err)
		ctx.reply(`‚ùå :: –û, –Ω–µ—Ç! –Ø –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É:\n\n${err}`)
    }
}

const activateCommand = async (bot) => {
    try {
        await bot.command('activate', async (ctx) => {   
            const chatId = ctx.chat.id;
            const row = await db.execute(`SELECT * FROM chats WHERE chat_id = ?`, [chatId])
            if (row[0].activated === 1) return ctx.reply(`‚ùå :: –ì—Ä—É–ø–ø–∞ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!`);
            await ctx.reply(`‚è≥ :: –ê–∫—Ç–∏–≤–∏—Ä—É—é... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...`)
            const startTime = Date.now()
            await db.execute(`UPDATE chats SET activated = ? WHERE chat_id = ?`, [true, chatId])
            const endTime = Date.now()
            await ctx.reply(`‚úÖ :: –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${endTime - startTime} –º—Å.`)
        });
    } catch (err) {
        console.error(err);
        ctx.reply(`‚ùå :: –û, –Ω–µ—Ç! –Ø –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É:\n\n${err}`);
    }
}

const joinEvent = async (bot) => {
    try {
        await bot.on('new_chat_members', async (ctx) => {
            const chatId = ctx.chat.id;
            const botId = ctx.botInfo.id;
            const newMember = ctx.message.new_chat_member;
            if (newMember.id === botId) {
                const row = await db.execute(`SELECT * FROM chats WHERE chat_id = ?`, [chatId])
                if (row.length === 0) {
                    await ctx.reply(`‚è≥ :: –î–æ–±–∞–≤–ª—è—é —ç—Ç—É –≥—Ä—É–ø–ø—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.`)
                    const startTime = Date.now()
                    await db.execute(`INSERT INTO chats(chat_id, created_at) VALUES (?, ?)`, [chatId, Date.now()])
                    const endTime = Date.now()
                    await ctx.reply(`‚úÖ :: –û—Ç–ª–∏—á–Ω–æ, –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∑–∞ ${endTime - startTime} –º—Å.`)
                    return ctx.reply(`üßÅ :: –ù–∞–ø–∏—à–∏—Ç–µ /activate —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å!`)
                }
            }
        })
    } catch (err) {
        console.error(err);
        ctx.reply(`‚ùå :: –û, –Ω–µ—Ç! –Ø –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É:\n\n${err}`);
    }
}

const kickEvent = async (bot) => {
    try {
      await bot.on('left_chat_member', async (ctx) => {
        const chatId = ctx.chat.id;
        const botId = ctx.botInfo.id;
        const kickedMember = ctx.message.left_chat_member;
        if (kickedMember.id === botId) {
          const row = await db.execute(`SELECT * FROM chats WHERE chat_id = ?`, [chatId])
          if (row.length !== 0) {
            return db.execute(`DELETE FROM chats WHERE chat_id = ?`, [chatId])
          }
        }
      });
    } catch (err) {
      console.error(err);
      ctx.reply(`‚ùå :: –û, –Ω–µ—Ç! –Ø –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É:\n\n${err}`);
    }
  }
  


module.exports = {
    startBasic,
    activateCommand,
    joinEvent,
    kickEvent
}
